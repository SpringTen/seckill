<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--    spring整合mybatis-->
    <!--    1、配置数据库属性，从外部引入，取值方式：${}-->
    <!--    spring引入外部属性都是使用这种方式-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--    2、数据库连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--        基本数据库配置-->
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--        额外的配置-->
        <property name="maxPoolSize" value="20"/>
        <property name="minPoolSize" value="10"/>
        <!--        关闭连接时，不自动进行提交-->
        <property name="autoCommitOnClose" value="false"/>
        <!--        获取连接超时的时间-->
        <property name="checkoutTimeout" value="1000"/>
        <!--        获取连接失败，重试的次数-->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>
    <!--    3、配置mybatis的 SqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--        1）注入数据库属性-->
        <property name="dataSource" ref="dataSource"/>
        <!--        2）mybatis配置文件位置-->
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <!--        3）简化操作：扫描   将实体类的类名，注入到mybatis别名系统，在xml中就不需要com.seckill.entity.Seckill，只需要Seckill-->
        <property name="typeAliasesPackage" value="com.seckill.entity"/>
        <!--        4）简化操作：扫描   扫描所有dao接口的实现类，放入到spring容器，方便以后直接从容器中取值注入-->
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"/>
    </bean>
    <!--    4、配置扫描Dao接口，动态实现Dao接口，注入到spring容器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--        注入sqlSessionFactory，
                    注意：不使用sqlSessionFactoryBean的原因是：
                        会在jdbc.properties数据加载之前进行初始化sqlSessionFactory
                        导致出现错误
                    注意：这里使用的是value，不是ref-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--        简化操作：扫描Dao接口-->
        <property name="basePackage" value="com.seckill.dao"/>
    </bean>

    <!--  5、把RedisDao放入spring容器  -->
    <bean id="redisDao" class="com.seckill.dao.cache.RedisDao">
        <constructor-arg index="0" value="localhost"/>
        <constructor-arg index="1" value="6379"/>
    </bean>

</beans>