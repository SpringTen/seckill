<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <!--    1、扫描web相关的bean-->
    <context:component-scan base-package="com.seckill.web"/>

    <!--    配置springMVC-->
    <!--    2、开启springMVC注解模式  简化配置
                1）自动注册DefaultAnnotationHandlerMapping和AnnotationMethodHandlerAdapter
                2）提供一系列：数据绑定，数字和日期format  @NumberFormat  @DateTimeFormat
                    xml, json的默认读写支持-->
    <mvc:annotation-driven/>

    <!--    3、静态资源默认servlet配置
                1）加入对静态资源的处理 js, img, png, css
                2）允许使用 / 做整体映射-->

    <!--    优雅REST风格的资源URL不希望带 .html 或 .do 等后缀.由于早期的Spring MVC不能很好地处理静态资源，
        所以在web.xml中配置DispatcherServlet的请求映射，往往使用 *.do 、 *.xhtml等方式。
        这就决定了请求URL必须是一个带后缀的URL，而无法采用真正的REST风格的URL。
            如果将DispatcherServlet请求映射配置为"/"，则Spring MVC将捕获Web容器所有的请求，
        包括静态资源的请求，Spring MVC会将它们当成一个普通请求处理，因此找不到对应处理器将导致错误。
        如何让Spring框架能够捕获所有URL的请求，同时又将静态资源的请求转由Web容器处理，
        是可将DispatcherServlet的请求映射配置为"/"的前提。由于REST是Spring3.0最重要的功能之一，
        所以Spring团队很看重静态资源处理这项任务，给出了堪称经典的两种解决方案。-->
    <!--    在springMVC-servlet.xml中配置<mvc:default-servlet-handler />后，会在Spring MVC上下文中定义一个
        org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler，它会像一个检查员，
        对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，
        如果不是静态资源的请求，才由DispatcherServlet继续处理。-->
    <!--    或者 <mvc:resources location="/,classpath:/META-INF/publicResources/" mapping="/resources/**"/>-->
    <mvc:default-servlet-handler/>

    <!--    4、配置jsp, 显示ViewResolver-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <!--    WEB-INF/jsp/之前的 / 不可以省略，否则404    -->
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

</beans>